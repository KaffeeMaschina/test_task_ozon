package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"github.com/KaffeeMaschina/ozon_test_task/internals/graph/model"
	"log/slog"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, email string) (*model.User, error) {
	user, err := r.Storage.AddUser(username, email)
	if err != nil {
		r.Log.Error(err.Error())
		return nil, err
	}
	r.Log.Debug("User is successfully added", slog.String("user", user.Username), slog.String("user id", user.ID))
	return user, err
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, userID string, title string, text string, allowComments bool) (*model.Post, error) {
	post, err := r.Storage.AddPost(userID, title, text, allowComments)
	if err != nil {
		r.Log.Error(err.Error())
		return nil, err
	}
	r.Log.Debug("Post is successfully added", slog.String("post", post.Title), slog.String("post id", post.ID))
	return post, err
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, userID string, postID string, parentID string, text string) (*model.Comment, error) {
	comment, err := r.Storage.AddComment(userID, postID, parentID, text)
	if err != nil {
		r.Log.Error(err.Error())
		return nil, err
	}
	r.Log.Debug("Comment is successfully added", slog.String("comment", comment.Text), slog.String("comment id", comment.ID))
	return comment, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	posts, err := r.Storage.GetAllPosts()
	if err != nil {
		r.Log.Error(err.Error())
		return nil, err
	}
	r.Log.Debug("Posts are successfully returned")
	return posts, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {

	post, err := r.Storage.GetPost(id)
	if err != nil {
		r.Log.Error(err.Error())
		return nil, err
	}
	r.Log.Debug("Post is successfully returned", slog.String("post", post.Title), slog.String("post id", post.ID))
	return post, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
